#version 430 core
layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, std430) readonly buffer inputVertices {
	vec4[] vertexPositionsLocalSpace; // vec4 for padding to 16 bytes
};

layout (binding = 1, std430) buffer finalMinMax {
	ivec4 minVertexInt;
	ivec4 maxVertexInt;
};

// Shared memory for reduction per work group
shared vec3 localMin[gl_WorkGroupSize.x];
shared vec3 localMax[gl_WorkGroupSize.x];

// Large constant to offset float values
const float FLOAT_OFFSET = 1000.0;

void main() {
	uint globalID = gl_GlobalInvocationID.x;
	uint localID = gl_LocalInvocationID.x;
	uint workGroupSize = gl_WorkGroupSize.x;

	vec3 pos;
	uint size = vertexPositionsLocalSpace.length();
	// Load vertex positions and find local min/max
	if (globalID < size) {
		pos = vertexPositionsLocalSpace[globalID].xyz;
	}
	else {
		pos = vertexPositionsLocalSpace[size - 1].xyz;
	}

	// Store local min/max in shared memory
	localMin[localID] = pos;
	localMax[localID] = pos;

	if (globalID == 0) {
		minVertexInt = ivec4(floatBitsToInt(pos + FLOAT_OFFSET), 0);
		maxVertexInt = ivec4(floatBitsToInt(pos + FLOAT_OFFSET), 0);
	}

	// Sync
	barrier();

	// Parallel reduction within workgroup
	for (uint offset = workGroupSize / 2; offset > 0; offset /= 2) {
		if (localID < offset) {
			localMin[localID] = min(localMin[localID], localMin[localID + offset]);
			localMax[localID] = max(localMax[localID], localMax[localID + offset]);
		}

		// Sync
		barrier();
	}

	// Write final min/max for this workgroup to global memory using atomic operations
	if (localID == 0) {
		// Offset float values to ensure correct bitwise comparison
		vec3 localMinShifted = localMin[0] + FLOAT_OFFSET;
		vec3 localMaxShifted = localMax[0] + FLOAT_OFFSET;

		// floatBitsToInt, convert a float to its binary representation as GLSL atomic operations don't support float types
		ivec3 localMinInt = ivec3 (
			floatBitsToInt(localMinShifted.x),
            floatBitsToInt(localMinShifted.y),
            floatBitsToInt(localMinShifted.z)
		);
		ivec3 localMaxInt = ivec3 (
			floatBitsToInt(localMaxShifted.x),
            floatBitsToInt(localMaxShifted.y),
            floatBitsToInt(localMaxShifted.z)
		);

		atomicMin(minVertexInt.x, localMinInt.x);
		atomicMin(minVertexInt.y, localMinInt.y);
		atomicMin(minVertexInt.z, localMinInt.z);

		atomicMax(maxVertexInt.x, localMaxInt.x);
		atomicMax(maxVertexInt.y, localMaxInt.y);
		atomicMax(maxVertexInt.z, localMaxInt.z);
	}
}