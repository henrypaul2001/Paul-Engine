#version 430 core
layout (local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct Vertex {
	vec4 positionLocalSpace;
	int boneIDs[8];
	float boneWeights[8];
};

layout (binding = 0, std430) readonly buffer inputVertices {
	//vec4[] vertexPositionsLocalSpace; // vec4 for padding to 16 bytes
	Vertex[] vertices;
};

layout (binding = 1, std430) buffer finalMinMax {
	ivec4 minVertexInt;
	ivec4 maxVertexInt;
};

// Shared memory for reduction per work group
shared vec3 localMin[gl_WorkGroupSize.x];
shared vec3 localMax[gl_WorkGroupSize.x];

// Large constant to offset float values
const float FLOAT_OFFSET = 1000.0;

const int MAX_BONES = 200;
const int MAX_BONE_INFLUENCE = 8;
uniform mat4 boneTransforms[MAX_BONES];
uniform bool hasBones;

uniform mat4 model;

void main() {
	uint globalID = gl_GlobalInvocationID.x;
	uint localID = gl_LocalInvocationID.x;
	uint workGroupSize = gl_WorkGroupSize.x;

	vec3 pos;
	vec4 transformedPos;
	int thisBoneIDs[8];
	float thisBoneWeights[8];
	uint size = vertices.length();

	// Load vertex positions and find local min/max
	if (globalID < size) {
		pos = vertices[globalID].positionLocalSpace.xyz;
		thisBoneIDs = vertices[globalID].boneIDs;
		thisBoneWeights = vertices[globalID].boneWeights;
	}
	else {
		pos = vertices[size - 1].positionLocalSpace.xyz;
		thisBoneIDs = vertices[size - 1].boneIDs;
		thisBoneWeights = vertices[size - 1].boneWeights;
	}

	// Animate position
	if (hasBones) {
        // Skeletal animation
        mat4 boneTransform = mat4(0.0);
        for (int i = 0; i < MAX_BONE_INFLUENCE; i++) {
            if (thisBoneIDs[i] != -1 && thisBoneIDs[i] < MAX_BONES) {
                boneTransform += boneTransforms[thisBoneIDs[i]] * thisBoneWeights[i];
            }
        }
        transformedPos = boneTransform * vec4(pos, 1.0);
    }
	else {
		transformedPos.xyz = pos.xyz;
	}

	// Apply rotation and scaling
	vec3 scale;
	scale.x = length(vec3(model[0][0], model[0][1], model[0][2]));
	scale.y = length(vec3(model[1][0], model[1][1], model[1][2]));
	scale.z = length(vec3(model[2][0], model[2][1], model[2][2]));

	mat3 rotation;
	rotation[0] = vec3(model[0][0], model[0][1], model[0][2]) / scale.x;
	rotation[1] = vec3(model[1][0], model[1][1], model[1][2]) / scale.y;
	rotation[2] = vec3(model[2][0], model[2][1], model[2][2]) / scale.z;

	// Apply rotation and scale
	vec3 transformed_vec = rotation * (transformedPos.xyz * scale);

	// Store local min/max in shared memory
	localMin[localID] = transformed_vec;
	localMax[localID] = transformed_vec;

	if (globalID == 0) {
		minVertexInt = ivec4(floatBitsToInt(pos + FLOAT_OFFSET), 0);
		maxVertexInt = ivec4(floatBitsToInt(pos + FLOAT_OFFSET), 0);
	}

	// Sync
	barrier();

	// Parallel reduction within workgroup
	for (uint offset = workGroupSize / 2; offset > 0; offset /= 2) {
		if (localID < offset) {
			localMin[localID] = min(localMin[localID], localMin[localID + offset]);
			localMax[localID] = max(localMax[localID], localMax[localID + offset]);
		}

		// Sync
		barrier();
	}

	// Write final min/max for this workgroup to global memory using atomic operations
	if (localID == 0) {
		// Offset float values to ensure correct bitwise comparison
		vec3 localMinShifted = localMin[0] + FLOAT_OFFSET;
		vec3 localMaxShifted = localMax[0] + FLOAT_OFFSET;

		// floatBitsToInt, convert a float to its binary representation as GLSL atomic operations don't support float types
		ivec3 localMinInt = ivec3 (
			floatBitsToInt(localMinShifted.x),
            floatBitsToInt(localMinShifted.y),
            floatBitsToInt(localMinShifted.z)
		);
		ivec3 localMaxInt = ivec3 (
			floatBitsToInt(localMaxShifted.x),
            floatBitsToInt(localMaxShifted.y),
            floatBitsToInt(localMaxShifted.z)
		);

		atomicMin(minVertexInt.x, localMinInt.x);
		atomicMin(minVertexInt.y, localMinInt.y);
		atomicMin(minVertexInt.z, localMinInt.z);

		atomicMax(maxVertexInt.x, localMaxInt.x);
		atomicMax(maxVertexInt.y, localMaxInt.y);
		atomicMax(maxVertexInt.z, localMaxInt.z);
	}
}